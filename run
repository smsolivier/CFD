#!/usr/bin/env python3

import Timer 
import os
import sys 

import argparse 

from shutil import copyfile # copy files 

import numpy as np 

import shutil

####################### My Changes ########################
from generateInlet import *
###########################################################

''' Runs GEMIX project 
	Changes 
		decomposeParDict, blockMeshDict, fvSchemes, fvSolution, turbulenceProperties 
	at runtime for variable 
		x,y,z processor decomposition 
		Nx1, Nx2, Ny, Nz number of cells 
		switch on 3D modeling 
			changes empty to wall and reflecting 
		turbulence modeling 
''' 

# get command line values 	
# description
parser = argparse.ArgumentParser(description='run interFoam in parallel')
# number of processors in x, y, z 
parser.add_argument('-np', nargs=3, default=[4,1,1], metavar=('Nx','Ny','Nz'),
	help='number of processors in x y z')
# number of cells in x_inlet, x_mixing, y and z
parser.add_argument('-N', 
	nargs=4, 
	default=[10,30,10,1], 
	metavar=('NxInlet', 'NxMixing', 'Ny', 'Nz'),
	help='number of cells'
	)
# threeD option replaced by specify Nz > 1 
# parser.add_argument('-threeD', action='store_true', default=False, help='run in 3D')
# use k-Epsilon 
parser.add_argument('-ke', action='store_true',	help='use k-Epsilon turbulence model')
# use k-Omega 
parser.add_argument('-ko', action='store_true', help='use k-Omega turbulence model')
# use laminar 
parser.add_argument('-laminar', action='store_true', help='turn off turbulence')
# bool for send notification when done, default to on 
parser.add_argument('-quiet', action='store_true', help='suppress notification when done')
# make mesh only 
parser.add_argument('-setupOnly', action='store_true', help='generate mesh only ')
# don't remove previous times 
parser.add_argument('-cont', action='store_true', help='continue from latest time')
# use simple geometry 
parser.add_argument('-simple', action='store_true', help='use geometry without angled inlets')
# run readFoam.py to compare answer to data 
parser.add_argument('-readFoam', action='store_true', help='run readFoam.py to plot the answer and experimental data')
# specify which case to run 
parser.add_argument('-case', type=int, default=0, help='0: N339, 1: N337, 2: N320')

# specify diffusivity 
parser.add_argument('-Dab', type=float, default=1e-6, help='diffusivity used in twoLiquidMixingFoam')
# alphatab (1/Schmidt number)
parser.add_argument('-alphatab', type=float, default=1, help='alpha tab used in twoLiquidMixingFoam')

# use interFoam 
parser.add_argument('-interFoam', action='store_true', help='use interFoam instead of twoLiquidMixingFoam')

# set output directory 
parser.add_argument('-outDir', type=str, default='output', help='set output directory of interpolated Ux, k, C')

####################### My Changes ########################
# specify case instead 
# parser.add_argument('-condition', nargs=1, default='1.0', metavar='inletVelocity', help = 'Specify the inlet velocity (0.6|1.0)')
parser.add_argument('-interpolation', nargs=1, default='linear', metavar='scheme', help = 'Specify the interpolation method to be used on the inlet conditions (nearest|linear|cubic)\nI plan to add a b-spline interpolation method')
parser.add_argument('-PLOT', action='store_true', help='Show plots of the inlet cell centers and the corresponding interpolated inlet conditions')
parser.add_argument('-STATUS', action='store_true', help='Display the status of the run')
###########################################################

# parse arguments 
args = parser.parse_args()

####################### My Changes ########################
# Double check that the input arguments are valid
# if not(''.join(args.condition) == '0.6'
# 	   or ''.join(args.condition) == '.6'
# 	   or ''.join(args.condition) == '1.0'
# 	   or ''.join(args.condition) == '1'):
# 	error('Invalid inlet condition - use either \'0.6\' or \'1.0\'')
if not(''.join(args.interpolation) == 'nearest'
	   or ''.join(args.interpolation) == 'linear'
	   or ''.join(args.interpolation) == 'cubic'):
	error('Invalid interpolation method - use either \'nearest\', \'linear\', or \'cubic\'')
###########################################################

xoutput = [.05, .15, .25, .35, .45] # list of interpolation distances 

print('Running NUEN 489 GEMIX')

# get number of processors in x, y, z 
npx = int(args.np[0])
npy = int(args.np[1])
npz = int(args.np[2])

nprocs = npx * npy * npz # total number of cells 

# number of cells 
Nx1 = int(args.N[0])
Nx2 = int(args.N[1])
Ny = int(args.N[2])
Nz = int(args.N[3])

NVols = (Nx1 + Nx2) * 2*Ny * Nz 

# --- change turbulence model --- 
turbDir = 'kOmega/' # default model 
if (args.ke == True):
	turbDir = 'kEpsilon/' 
elif (args.laminar == True):
	turbDir = 'laminar/'

# copy fvSchemes, fvSolution, turbulenceProperties to run locations 
copyfile(turbDir + 'fvSchemes', 'system/fvSchemes')
copyfile(turbDir + 'fvSolution', 'system/fvSolution')
copyfile(turbDir + 'turbulenceProperties', 'constant/turbulenceProperties')

# handle alert 
ALERT = True 
if (args.quiet == True):
	ALERT = False 


# --- write decomposeParDict --- 
decompName = 'system/decomposeParDict'
# read in current file 
f = open(decompName, 'r')
string = '' 
for line in f:
	# change number of subdomains 
	if (line.startswith('numberOfSubdomains')):
		string += 'numberOfSubdomains ' + str(nprocs) + ';\n'

	# change Nx Ny Nz 
	elif ('n (' in line):
		string += '    n (' + str(npx) + ' ' + str(npy) + ' ' + str(npz) + '); \n'

	# copy everything else 
	else:
		string += line 

f.close()

# write changes to file 
out = open(decompName, 'w')
out.write(string)
out.close()


# --- write blockMesh --- 
# change blockMeshDict location 
if (args.simple): # copy simple geometry 
	copyfile('mesh/simple', 'system/blockMeshDict')
else: # use better geometry 
	blockDictName = 'mesh/2D'
	if (Nz > 1):
		blockDictName = 'mesh/3D'

	f = open('mesh/top', 'r')
	string = '' 
	for line in f:

		# change Nx1 
		if (line.startswith('Nx1 ')):
			string += 'Nx1 ' + str(Nx1) + '; \n'

		# change Nx2 
		elif (line.startswith('Nx2 ')):
			string += 'Nx2 ' + str(Nx2) + '; \n' 

		# change Ny 
		elif (line.startswith('Ny ')):
			string += 'Ny ' + str(Ny) + '; \n' 

		# change Nz 
		elif (line.startswith('Nz ')):
			string += 'Nz ' + str(Nz) + '; \n' 

		# leave everything else 
		else:
			string += line 
	f.close()
	f = open(blockDictName, 'r')
	for line in f:
		string += line 
	f.close()
	# write changes to blockMeshDict 
	out = open('system/blockMeshDict', 'w')
	out.write(string)
	out.close()

# --- case selection --- 
inletVelocity = '' # store inlet velocity string for generateInlet  
densityFile = '' # store transport properties file name 
if (args.case == 0): # N339, .6 m/s, same density 
	inletVelocity = '.6' 
	densityFile = 'rho/same'

elif (args.case == 1): # N337, 1 m/s, same density  
	inletVelocity = '1' 
	densityFile = 'rho/same'

elif (args.case == 2): # N320, .6 m/s, different density  
	inletVelocity = '.6'
	densityFile = 'rho/diff' 


# --- copy density file to constant/transportProperties --- 
copyfile(densityFile, 'constant/transportProperties')


# --- set Dab in constant/transportProperties --- 
f = open('constant/transportProperties', 'r')
string = '' # store transportProperties file 
for line in f:
	if (line.startswith('Dab')):
		string += 'Dab           [0 2 -1 0 0 0 0]    ' + str(args.Dab) + '; \n'
	elif (line.startswith('alphatab')):
		string += 'alphatab      [0 0 0 0 0 0 0]     ' + str(args.alphatab) + '; \n'
	else:
		string += line 
f.close()
# write string to constant/transportProperties 
f = open('constant/transportProperties', 'w')
f.write(string) 
f.close()


# --- change controlDict to change solver type --- 
application = 'twoLiquidMixingFoam' # name of solver 
if (args.interFoam):
	application = 'interFoam'
f = open('system/controlDict', 'r') # open control dict 
string = '' # store file 
for line in f:
	if (line.startswith('application')): # if application line 
		string += 'application     ' + application + ';\n'

	else: # all other lines 
		string += line 
f.close()
# write to system/controlDict
f = open('system/controlDict', 'w') # write to same file 
f.write(string) # overwrite file with changes 
f.close()


# --- run commands --- 
def runcmd(cmd):
	''' run command cmd and exit if errors ''' 
	x = os.system(cmd)
	if (x != 0):
		print('ERROR: ' + cmd)
		sys.exit()

tt = Timer.timer() # start timer 

yPlus = [] # store yplus values 

if (not(args.cont)): # if not a continue run 
	runcmd('foamListTimes -rm') # delete previous time steps 

	if (os.path.isfile('0/yPlus')): # remove previous yPlus 
		runcmd('rm 0/yPlus')

	# remove 0/V 
	if (os.path.isfile('0/V')):
		runcmd('rm 0/V')

	# remove writeCellCentres if they exist 
	if (os.path.isfile('0/ccx')):
		runcmd('rm 0/ccx 0/ccy 0/ccz')

	runcmd('blockMesh > log') # generate mesh 

	# generate inlet conditions, write to 0 folder 
	generateInlet(inletVelocity, args.interpolation, args.PLOT, args.STATUS)

if (not(args.setupOnly)): # run if not in setupOnly mode 

	# decompose for parallel run, -force overwrite current directories 
	if (not(args.cont)): # if not a continue run 
		runcmd('decomposePar -force > log') 

	# run pipe into log
	runcmd('mpirun -np ' + str(nprocs) + ' ' + application + ' -parallel | tee log')

	runcmd('reconstructPar > /dev/null') # reconstruct parallel folders 

	# get yPlus 
	runcmd(application + ' -postProcess -func yPlus > yPlusLog')

	# get yPlus values and print to screen 
	f = open('yPlusLog', 'r')
	yPlusMin = [] # store min yplus
	yPlusMax = [] # store max yplus
	yPlusAvg = [] # store average yplus  
	time = [] # store time steps 
	for line in f:
		if (line.startswith('    patch walls y+ : ')):
			for i in range(len(line)):
				if line[i:i+len('min = ')] == 'min = ':
					val = line[i+len('min = '):]
					yPlusMin.append(val.split(',')[0])

				elif line[i:i+len('max = ')] == 'max = ':
					yPlusMax.append(line[i+len('max = '):].split(',')[0])

				elif line[i:i+len('average = ')] == 'average = ':
					yPlusAvg.append(line[i+len('average = '):].split(',')[0].strip())

		elif (line.startswith('Time = ')):
			time.append(line.split('=')[1].strip())
	f.close()
	print('\nyPlus')
	# print terminal table of yPlus's 
	print('{:<5} {:<10} {:<10} {:<10}'.format('Time', 'min', 'max', 'avg'))
	for i in range(len(time)):
		print('{:<5} {:<10} {:<10} {:<10}'.format(
			time[i], 
			yPlusMin[i], 
			yPlusMax[i], 
			yPlusAvg[i])
		)
	# remove yPlusLog 
	os.remove('yPlusLog')


	# --- process output into output/ --- 
	# write Ux, k, concentration to output directory 

	# get highest time directory name 
	tdir = '0'
	# find highest time directory 
	for f in os.listdir('.'):
		if (f[0].isdigit() and os.path.isdir(f)):
			if (float(f) > float(tdir)):
				tdir = f 
	tdir += '/'

	graphDir = 'postProcessing/singleGraph/' + tdir # location of singleGraph plots 
	outDir = args.outDir + '/' # directory to store plots into 
	# make sure outDir exists
	if (os.path.isdir(outDir)):
		shutil.rmtree(outDir)
	os.makedirs(outDir)

	# run singleGraph for each distance in xoutput 
	for i in range(len(xoutput)):
		loc = '{:0>3}'.format(int(xoutput[i]*1000)) # distance in mm 
		# make subdirectory for each distance in xoutput 
		if (os.path.isdir(outDir+loc)):
			shutil.rmtree(outDir+loc)
		os.makedirs(outDir+loc)

		currentDir = outDir + loc + '/'

		# write singleGraph x distance to interpolate to 
		f = open('system/singleGraph', 'r')
		string = '' 
		for line in f:
			if line.startswith('L '):
				string += 'L {}; \n'.format(xoutput[i])
			else:
				string += line 
		f.close()
		f = open('system/singleGraph', 'w')
		f.write(string)
		f.close()

		# make graph 
		runcmd(application + ' -postProcess -func singleGraph > /dev/null')

		# write Ux to file 
		df = np.loadtxt(graphDir+'line_U.xy') # get y, Ux 

		f = open(currentDir+'U', 'w')
		for j in range(np.shape(df)[0]):
			f.write('{} {} \n'.format(df[j,0], df[j,1]))

		f.close()

		# write k and concentration to file 
		cf = np.loadtxt(graphDir+'line_k_alpha.upper.xy') # y, k, alpha.upper 

		f = open(currentDir + 'k', 'w')
		g = open(currentDir + 'C', 'w')

		for j in range(np.shape(cf)[0]):
			f.write('{} {} \n'.format(cf[j,0], cf[j,1]))
			g.write('{} {} \n'.format(cf[j,0], cf[j,2]))

		f.close()
		g.close()


print('Number of Volumes =', NVols)

time, str = tt.stop() # end timer 


# make notification if wall time is longer than a minute 
if (time > 60 and ALERT):
	os.system('notify-send --urgency=low -i " " "openfoam done" \
		"run completed in %s"' % (str))

# compare to experimental results 
if (args.readFoam):
	runcmd('./readFoam.py %s' % (args.case))
